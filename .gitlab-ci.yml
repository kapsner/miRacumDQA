variables:
  _R_CHECK_CRAN_INCOMING_: "false"
  _R_CHECK_FORCE_SUGGESTS_: "true"
  CI_IMAGE_NAME: "rocker/verse"
  CI_IMAGE_TAG: "3.6.2"
  R_PKG_NAME: "miRacumDQA"

default:
  image: ${CI_IMAGE_NAME}:${CI_IMAGE_TAG}
  before_script:
    - echo "options('repos' = 'https://ftp.fau.de/cran/')" >> /usr/local/lib/R/etc/Rprofile.site
    - mkdir -p ci

.template_check:
  allow_failure: true # necessary when having development-packages (in remotes-section of DESCRIPTION)
  script:
    - R -e "devtools::install_dev_deps(pkg = '.', upgrade = 'always')"
    - R -e "devtools::check(pkg = '.', args = c('--no-tests, --no-vignettes'), build_args = c('--no-build-vignettes'), check_dir = '${CI_PROJECT_DIR}/ci')"

.template_test:
  script:
    - R -e "devtools::install_dev_deps(pkg = '.', upgrade = 'always')" # we only need dev_deps for the vignette and testing
    - R -e "devtools::test(pkg = '.')"

.template_install:
  script:
    - R -e "devtools::install_dev_deps(pkg = '.', upgrade = 'always')" # we only need dev_deps for the vignette and testing
    - R -e "devtools::install(pkg = '.', upgrade = 'always')"

stages:
  - build
  - install
  - predeploy
  - deploy

check:
  stage: build
  extends: .template_check
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.Rcheck"
    when: on_failure # upload check artifacts when job fails!
    expire_in: 1 week
  except:
    refs:
      - tags
  only:
    refs:
      - master
      - development

create_manual:
  stage: build
  allow_failure: true
  script:
    - R -e "devtools::install_deps(pkg = '.', upgrade = 'always')"
    - R -e "devtools::build_manual(pkg = '.', path = '${CI_PROJECT_DIR}/ci')"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.pdf"
    expire_in: 1 week
  except:
    refs:
      - tags
  only:
    refs:
      - master

build_source_and_binary:
  stage: build
  script:
    - R -e "devtools::install_deps(pkg = '.', upgrade = 'always')"
    - R -e "devtools::build(pkg = '.', path = '${CI_PROJECT_DIR}/ci', binary = FALSE, vignettes = FALSE)"
    - R -e "devtools::build(pkg = '.', path = '${CI_PROJECT_DIR}/ci', binary = TRUE, vignettes = FALSE)"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.tar.gz"
    expire_in: 1 week
  except:
    refs:
      - tags
  only:
    refs:
      - master

# To have the coverage percentage appear as a gitlab badge follow these
# instructions:
# https://docs.gitlab.com/ee/user/project/pipelines/settings.html#test-coverage-parsing
# The coverage parsing string is
# Coverage: \d+\.\d+


testing:
  stage: build
  extends: .template_test
  except:
    refs:
      - tags
  only:
    refs:
      - master
      - development

# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/

install:
  stage: install
  extends: .template_install
  except:
    refs:
      - tags
  only:
    refs:
      - master
      - development


## Until here, everything will be evaluated if there is NO tag in the commit
# ---------------------------------------------------------------------------
## From here on, everything will be evaluated if there IS a tag in the commit
## (this is nearly the same like the pieline without a tag but with an additional deployment stage):

predeploy_check:
  stage: predeploy
  extends: .template_check
  only:
    refs:
      - tags

predeploy_testing:
  stage: predeploy
  extends: .template_test
  only:
    refs:
      - tags

predeploy_install:
  stage: predeploy
  extends: .template_install
  only:
    refs:
      - tags

deployment_to_deploy_repo:
  stage: deploy
  image: ubuntu:19.10
  when: on_success
  before_script: 
    - apt-get update && apt-get install git -y --no-install-recommends
  script:
    - mkdir ci_tmp
    - cd ci_tmp
    - git clone https://gitlab.miracum.org/miracum/dqa/DQAstats.git
    - cd DQAstats
    - git describe --tags `git rev-list --tags --max-count=1`
    - DQAstats_tag=$(git describe --tags `git rev-list --tags --max-count=1`) # gets tags across all branches, not just the current branch
    - cd ../
    - git clone https://gitlab.miracum.org/miracum/dqa/DQAgui.git
    - cd DQAgui
    - git describe --tags `git rev-list --tags --max-count=1`
    - DQAgui_tag=$(git describe --tags `git rev-list --tags --max-count=1`) # gets tags across all branches, not just the current branch
    - cd ../
    - git clone https://gitlab.miracum.org/miracum/dqa/miRacumDQA.git
    - cd miRacumDQA
    - miRacumDQA_tag=$(git describe --tags `git rev-list --tags --max-count=1`) # gets tags across all branches, not just the current branch
    - miRacumDQA_tag_no_prefix=$(echo ${miRacumDQA_tag} | sed "s/v//") # Replaces every 'v' in the tag with a blank ''.
    - cd ../
    - git clone https://${GITHUB_USER}:${K8S_SECRET_GITHUB_ACCESS_TOKEN}@gitlab.miracum.org/miracum/dqa/dqatool_deployment.git
    - cd dqatool_deployment
    - echo "#!/bin/bash" > deployvars.sh
    - echo "export DQASTATS_TAG=${DQAstats_tag}" >> deployvars.sh
    - echo "export DQAGUI_TAG=${DQAgui_tag}" >> deployvars.sh
    - echo "export MIRACUMDQA_TAG=${miRacumDQA_tag}" >> deployvars.sh
    - echo "export DEPLOY_TAG=${miRacumDQA_tag_no_prefix}" >> deployvars.sh
    - git push origin master
  only:
    refs:
      - tags
