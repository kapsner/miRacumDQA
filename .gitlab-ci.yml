variables:
  _R_CHECK_CRAN_INCOMING_: "false"
  _R_CHECK_FORCE_SUGGESTS_: "true"
  CI_IMAGE_NAME: "rocker/verse"
  CI_IMAGE_TAG: "3.6.2"
  R_PKG_NAME: "miRacumDQA"

default:
  image: ${CI_IMAGE_NAME}:${CI_IMAGE_TAG}
  before_script:
    - echo "options('repos' = 'https://ftp.fau.de/cran/')" >> /usr/local/lib/R/etc/Rprofile.site
    - mkdir -p ci

stages:
  - build
  - deploy

check:
  stage: build
  allow_failure: true # necessary when having development-packages (in remotes-section of DESCRIPTION)
  script:
    - R -e "devtools::install_dev_deps(pkg = '.', upgrade = 'always')"
    - R -e "devtools::check(pkg = '.', args = c('--no-tests, --no-vignettes'), build_args = c('--no-build-vignettes'), check_dir = '${CI_PROJECT_DIR}/ci')"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.Rcheck"
    when: on_failure # upload check artifacts when job fails!
    expire_in: 1 week
  except:
    refs:
      - tags
  only:
    refs:
      - master
      - development

create_manual:
  stage: build
  allow_failure: true
  script:
    - R -e "devtools::install_deps(pkg = '.', upgrade = 'always')"
    - R -e "devtools::build_manual(pkg = '.', path = '${CI_PROJECT_DIR}/ci')"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.pdf"
    expire_in: 1 week
  except:
    refs:
      - tags
  only:
    refs:
      - master

build_source_and_binary:
  stage: build
  script:
    - R -e "devtools::install_deps(pkg = '.', upgrade = 'always')"
    - R -e "devtools::build(pkg = '.', path = '${CI_PROJECT_DIR}/ci', binary = FALSE, vignettes = FALSE)"
    - R -e "devtools::build(pkg = '.', path = '${CI_PROJECT_DIR}/ci', binary = TRUE, vignettes = FALSE)"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/ci/*.tar.gz"
    expire_in: 1 week
  except:
    refs:
      - tags
  only:
    refs:
      - master

# To have the coverage percentage appear as a gitlab badge follow these
# instructions:
# https://docs.gitlab.com/ee/user/project/pipelines/settings.html#test-coverage-parsing
# The coverage parsing string is
# Coverage: \d+\.\d+


testing:
  stage: build
  allow_failure: true
  when: on_success
  script:
    - R -e "devtools::install_dev_deps(pkg = '.', upgrade = 'always')" # we only need dev_deps for the vignette and testing
    - R -e "devtools::test(pkg = '.')"
  except:
    refs:
      - tags
  only:
    refs:
      - master
      - development

# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/

install:
  stage: deploy
  script:
    - # The syntax to get the newest tag from all branches is from https://gist.github.com/rponte/fdc0724dd984088606b0
    - # Remove old repos:
    - rm -rf ci_tmp
    - mkdir ci_tmp
    - cd ci_tmp
    - # Pull copy of DQAstats:
    - "git clone https://${CI_DEPLOYMENT_GIT_USR}:${CI_DEPLOYMENT_GIT_PWD}@gitlab.miracum.org/miracum/dqa/DQAstats.git"
    - cd DQAstats
    - "git describe --tags `git rev-list --tags --max-count=1`"
    - "DQAstats_tag=$(git describe --tags `git rev-list --tags --max-count=1`)" # gets tags across all branches, not just the current branch
    - "cd .."
    - # Pull copy of DQAgui:
    - "git clone https://${CI_DEPLOYMENT_GIT_USR}:${CI_DEPLOYMENT_GIT_PWD}@gitlab.miracum.org/miracum/dqa/DQAgui.git"
    - cd DQAgui
    - "git describe --tags `git rev-list --tags --max-count=1`"
    - "DQAgui_tag=$(git describe --tags `git rev-list --tags --max-count=1`)" # gets tags across all branches, not just the current branch
    - "cd .."
    - # Pull copy of miRacumDQA:
    - "git clone https://${CI_DEPLOYMENT_GIT_USR}:${CI_DEPLOYMENT_GIT_PWD}@gitlab.miracum.org/miracum/dqa/miRacumDQA.git"
    - cd miRacumDQA
    - "miRacumDQA_tag=$(git describe --tags `git rev-list --tags --max-count=1`)" # gets tags across all branches, not just the current branch
    - "miRacumDQA_tag_no_prefix=$(echo ${miRacumDQA_tag} | sed "s/v//")" # Replaces every 'v' in the tag with a blank ''.
    - "cd .."
    - 'echo "DQAstats:"'
    - "echo ${DQAstats_tag}"
    - echo "DQAgui:"
    - "echo ${DQAgui_tag}"
    - 'echo "miRacumDQA:"'
    - "echo ${miRacumDQA_tag}"
    - 'echo "miRacumDQA_tag_no_prefix:"'
    - "echo ${miRacumDQA_tag_no_prefix}"
    - # Clone the dqatool_deployment repo here to update the version tags in it:
    - "git clone https://${GITHUB_USER}:${K8S_SECRET_GITHUB_ACCESS_TOKEN}@gitlab.miracum.org/miracum/dqa/dqatool_deployment.git"
    - cd dqatool_deployment
    - # Write the tags to the repo:
    - 'echo "#!/bin/bash'
    - 'export DQASTATS_TAG=${DQAstats_tag}'
    - 'export DQAGUI_TAG=${DQAgui_tag}'
    - 'export MIRACUMDQA_TAG=${miRacumDQA_tag}'
    - 'export DEPLOY_TAG=${miRacumDQA_tag_no_prefix}" > deployvars.sh'
    - # Push changes to repo and trigger the build process:
    - git push origin master
    - # Cleanup / Remove repos:
    - "cd .."
    - rm -rf ci_tmp
  only:
    refs:
      - tags